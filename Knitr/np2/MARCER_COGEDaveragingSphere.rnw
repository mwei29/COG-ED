\documentclass[letterpaper]{article}
\usepackage{fullpage}
\addtolength{\hoffset}{-.5in}
\addtolength{\textwidth}{1in}
\addtolength{\voffset}{-.5in}
\addtolength{\textheight}{1in}
\begin{document}

<<startup, echo=FALSE, message=FALSE>>=
# Started 2 May by Mengzhe Wei to make parcel-average np2 knitr for COGED runs for individual participants. Adapting from code written by Joset A. Etzel, jetzel@wustl.edu. 
# Source for the original code is at https://osf.io/vqe92/; DMCC55B dataset at https://openneuro.org/datasets/ds003465/ 
# Each participant should have 3 COGED runs, which are graphed on the same plot. Each grey line is each run for each individual participant.
# Evaluation phase (yellow) is set between knots 3-5; decision making phase (blue) is set between knots 10-13. Note that it's different from Jenny Crawford's dACC paper.

rm(list=ls());  
options(warnPartialMatchDollar=TRUE);   # safety option

library(RNifti);

#Setting up for the knitr
# change this variable to the local copy of this directory, downloaded from https://openneuro.org/datasets/ds003465/
EVTS.path <- "/data/MARCER/participantData/"; 
in.path <- "/scratch2/weie/COGED_CODE/np2_trial/sphere_analysis/sphere_data/"
out.path <- "/scratch2/weie/COGED_CODE/np2_trial/sphere_analysis/sphere_table/"
trial.out.path <- "/scratch2/weie/COGED_CODE/np2_trial/sphere_analysis/sphere_trialwise/"
pp.path<-"/data/MARCER/participantData/fMRIPrep_PREPROCESSED/"
atlas.path <- "/data/MARCER/ATLASES/";  
afni.path <- "/usr/local/pkg/afni_22/";   # path to the afni function executables
dir.desc <- "20250114";  
sub.tbl <- read.table(paste0("/scratch2/weie/COGED_CODE/SubjectSet/", dir.desc, "_subjectSet.txt"), stringsAsFactors=FALSE);
sub.ids <- sub.tbl$sub.id[which(sub.tbl$COGED_CatchNonCatch == TRUE)]
p.name <- c("VS_left", "VS_right", "vmPFC_right_Bartra", "AI_left", "AI_right", "PCC", "Brainstem", "ACC", "dACC", "SupGyr_right", "Cingulate_left", "ITG_left", "IFG_left", "IPL_left_1", "IPL_left_2", "TempPole_right", "vmPFC_right_LG", "vmPFC_left_LG", "Amygdala_right_1", "Amygdala_left", "IPS_left", "dmPFC", "IPS_right", "AI_right_Chong", "dlPFC_left", "dlPFC_right", "Insula_left", "Amygdala_right_2")
parcels <- 265:292

TR <- 1;  # in seconds, for x-axis timecourse scaling
task.id <- "COGED";    
run.ids <- 1:3
#the two phases
time.ids <- c("eval","dm")
#the time point to plot the two phase
TR.value <- c(5,12.5)
do.trim <- 0.1;
n.TRs <- 25;

# #I believe this part is not currently used since I am not making brain parcel, this is for later in the knitr
# nlims <- c(-0.013, -0.003);   # color scaling for brain parcel plots
# plims <- c(0.003, 0.013);

# set these the same as in controlAnalysis_prep.R
which.polort <- 2;    # see http://mvpa.blogspot.com/2018/06/detrending-and-normalizing-timecourses.html for more info

#Evaluation and Decision making phases' TR 
# # variables for how to do the averaging. idea is to try to capture the HRF peak. button presses are short, so try a short window.
# start.sec <- 3;     # when to start the averaging, in seconds after event onset
# stop.sec <- 6;     # and when to stop
start.TR.eval <- 4;  # which TR to start averaging at: start.sec seconds after onset for evaluation
stop.TR.eval <- 6;  # which TR to stop averaging at: stop.sec seconds after onset for evaluation
start.TR.dm <- 11;  # which TR to start averaging at: start.sec seconds after onset for evaluation
stop.TR.dm <- 14;  # which TR to stop averaging at: stop.sec seconds after onset for evaluation
# out.suffix <- paste0("avg", start.sec, "to", stop.sec, "secAfter");   # suffix for the output filenames to keep track of averaging
@

\noindent \texttt{MARCER\textunderscore COGEDaveragingSphere.rnw} \par
\noindent compiled \today\  \par
\vspace{0.2 cm} 
\noindent This is a knitr file with each MARCER's subject's average activity in np2 format during 3 runs of COGED. Quality checking before going into trial-wise analysis. Instead of Schaefer parcels, the parcels have been resampled to spheres from Jenny's JNeuro paper. \par
\noindent Each participant should have 3 COGED runs, which are graphed on the same plot. Each grey line is each run for each individual participant.The blue lines are the aggregated average activity in each run. The light blue line represents to run 1, blue line represents run 2, and the dark blue line represents run 3. \par
\noindent Evaluation phase (yellow) is set between knots 4-6; decision making phase (blue) is set between knots 11-14. Note that it's different from Jenny Crawford's dACC paper and MARCER COGED GLM knitrs. MARCER and COGEDPETMR projects have different TRs, so it makes sense that the peak doesn't match completely. \par
\noindent Good to move on to trial-wise averaging since data looks sensible. The timing of the peaks of evaluation phase and decision making phase shifts a bit between parcels, which is common since even with BOLD primary sensory cortices are likely to have activity changes a bit earlier than "higher level" regions. And there's  a lot of variation within people - the curve shapes are generally very nice (most activity have peaks around the same time, but some are before, others after.) \par
\noindent Subjects 3147,3384,5264 do not have COGED run 3 behavioral data. \par
\vspace{1.2 cm} 

% \noindent Single Subject knitr. \par
% \vspace{0.2 cm}
<<code0, eval=FALSE, cache=TRUE, echo=FALSE, fig.height=2, fig.width=7, fig.align='center'>>= 
layout(matrix(1:6, 1:6)); 
par(mar=c(2, 1, 1.5, 0.5), mgp=c(1.1, 0.2, 0), tcl=-0.3);
# mar: c(bottom, left, top, right) gives the number of lines of margin on the four sides of the plot. Default is c(5, 4, 4, 2) + 0.1.

sid <- 2;
n.TRs <- 25;
# load this person's COGED EVT file - all three runs in one file
evt.fname <- paste0(EVTS.path, "EVTS/", sub.ids[sid], "/", sub.ids[sid], "_COGED_EV_valuation.txt");
if (file.exists(evt.fname)) {
  
  # get the event onsets for this run
  fin <- file(evt.fname, 'rt')
  tmp <- readLines(fin);
  close(fin); unlink(fin);
  if (length(tmp) != length(run.ids)) { stop("not expected evt file"); }
  
  evt.lst <- vector("list", length(run.ids));
  for (i in 1:length(run.ids)) { evt.lst[[i]] <- as.numeric(strsplit(tmp[i], " ")[[1]]); }
  
  # usually divide, but for MARCER, TR=1s ev.vec <- round(ev.tbl$onset/TR);   # integer onsets in TRs
  if (length(which(is.na(evt.lst))) > 0) { stop("is.na(ev.tbl$onset)"); }
}


# load in the timecourses for each run into a list
np.lst <- vector("list", length(run.ids));
for (rid in 1:length(run.ids)) { #rid <-1
  np.fname <- paste0(in.path, "sub-", sub.ids[sid], 
                     "_ses-1_task-COGED_run", run.ids[rid], "_np", which.polort, "_sphere.txt");
  if (file.exists(np.fname)) {
    # read the parcel-average timeseries for this run
    np.tbl <- read.delim(np.fname);
    if (ncol(np.tbl) != 30) { stop("ncol(np.tbl) != 30"); }  # volume "timecourses" files have parcel numbers for the columns
    np.lst[[rid]] <- np.tbl;
  }
}

clrs <- c("salmon", "steelblue", "darkgreen");

# one line for this person, run, each event
for (pid in 265:292) {   # pid <- 1
  plot(x=1, y=1, type='n', xlim=c(0,(n.TRs-1)), ylim=c(-0.015, 0.02), xlab="TR since event onset", ylab="", xaxs='i', cex.axis=0.8, cex.lab=0.8);
  mtext(paste0("Volume. p", pid, " all 3 runs."), side=3, cex=0.6, line=0.15); 
  lines(x=c(-10,1000), y=c(0,0), col='black');    #  horizontal line at zero
  
  for (rid in 1:length(run.ids)) {   # rid <- 1;
    evt.vec <- evt.lst[[rid]];
    np.tbl <- np.lst[[rid]];
    
    tmp.tbl <- array(NA, c(length(evt.vec), n.TRs));  # plot each event, plus put 'em into tmp.tbl so can calulate mean
    for (i in 1:length(evt.vec)) {   # i <- 1;
      tmp.tbl[i,] <- np.tbl[evt.vec[i]:((evt.vec[i])+n.TRs-1), paste0("Mean_", pid)]; 
      # lines(x=0:(n.TRs-1), y=tmp.tbl[i,], col='darkgrey', lwd=0.5);
    } 
    
    lines(x=0:(n.TRs-1), y=apply(tmp.tbl, 2, mean, trim=do.trim, na.rm=TRUE), col=clrs[rid], lwd=2);
  }
  
  #lines(x=0:8, y=apply(all.means, 2, mean, trim=do.trim), col='steelblue', lwd=2);
  box();
}

@

<<code1pre, eval=FALSE, cache=FALSE, echo=FALSE, fig.height=2, fig.width=7, fig.align='center'>>= 
###### Prepping for knitr #####
# Create intermediate files for knitr; contains checks for EVTs and np2
for (pid in 265:292) { #pid <- 265; seems like I need to restart at pid 233
  for (rid in 1:length(run.ids)) { #rid<-3
    all.means <- array(NA, c(length(sub.ids), n.TRs));
    for (sid in 1:length(sub.ids)) { #sid<-9 #sid<-65
      # Right here I found a lot of valuation EVTs are missing, so I wrote a couple lines to just check whose files are missing. With this, the script should print out a message and move on to the next participant if EVTs doesn't exist.
      #testing what went wrong
      # evt.fname <- paste0("/scratch2/weie/COGED_CODE/np2_trial/",sub.ids[sid],"_COGED_EV_valuation.txt")
      evt.fname <- paste0(EVTS.path, "EVTS/", sub.ids[sid], "/", sub.ids[sid], "_COGED_EV_valuation.txt");
      if (!file.exists(evt.fname)) {
        message("EVTs file does not exist for subject", sub.ids[sid])
        next
      }
      if (file.exists(evt.fname)) {
        fin <- file(evt.fname, 'rt')
        tmp <- readLines(fin);
        close(fin); unlink(fin);
        if (length(tmp) != length(run.ids)) { stop("not expected evt file"); }
        evt.lst <- vector("list", length(run.ids));
        evt.lst[[rid]] <- as.numeric(strsplit(tmp[rid], " ")[[1]]);
        if (is.na(evt.lst[[rid]])) {
          message("EVTs run:", run.ids[rid], " does not exist for subject", sub.ids[sid])
          next
        } else {
          # Then, we do the same thing for np   
          np.lst <- vector("list", length(run.ids));
          # for (rid in 1:length(run.ids)) {
          np.fname <- paste0(in.path, "sub-", sub.ids[sid], 
                             "_ses-1_task-COGED_run", run.ids[rid], "_np", which.polort, "_sphere.txt");
          if (!file.exists(np.fname)) {
            message("np2 file does not exist for subject", sub.ids[sid])
            next
          }
          if (file.exists(np.fname)) {
            # read the parcel-average timeseries for this run
            np.tbl <- read.delim(np.fname);
            if (ncol(np.tbl) != 30) { stop("ncol(np.tbl) != 30"); }  # volume "timecourses" files have parcel numbers for the columns; sphere only has 30
            np.lst[[rid]] <- np.tbl;
          }
        }
      }
      np.tbl <- np.lst[[rid]]
      evt.vec <- evt.lst[[rid]];
      tmp.tbl <- array(NA, c(length(evt.vec), n.TRs));
      for (i in 1:length(evt.vec)) { # i<-2
        tmp.tbl[i,] <- np.tbl[evt.vec[i]:((evt.vec[i])+n.TRs-1), paste0("Mean_", pid)]; } 
      all.means[sid,] <- apply(tmp.tbl, 2, mean, trim=do.trim, na.rm=TRUE)
      # lines(x=0:(n.TRs-1), y=all.means[sid,], col='darkgrey', lwd=0.5);
    }
    write.table(all.means,file = paste0(out.path, "COGED_np2_Sphere_p",pid,"_run",rid,".txt"), sep = "\t", row.names = FALSE, col.names = FALSE)
  }
}

@

\noindent MARCER participants with overplotted mean timecourses in spheres-average volumes, \Sexpr{task.id}. \par
\vspace{0.2 cm} 
<<code1, eval=TRUE, cache=FALSE, echo=FALSE, fig.height=2, fig.width=7, fig.align='center'>>= 
layout(matrix(1:6, 1:6)); 
par(mar=c(2, 1, 1.5, 0.5), mgp=c(1.1, 0.2, 0), tcl=-0.3);
n.TRs <- 25;
colors<-c('cyan','dodgerblue','darkblue')
# mar: c(bottom, left, top, right) gives the number of lines of margin on the four sides of the plot. Default is c(5, 4, 4, 2) + 0
##### New attempt to read in intermediate file
for (pid in 1:length(parcels)) { #pid<-1
  plot(x=1, y=1, type='n', xlim=c(0,(n.TRs-1)), ylim=c(-0.015, 0.02), xlab="TR since event onset", ylab="", xaxs='i', cex.axis=0.8, cex.lab=0.8);
  mtext(paste0(p.name[pid]), side=3, cex=0.6, line=0.15);
  lines(x=c(-10,1000), y=c(0,0), col='black'); #Creating a horizontal line
  #Adding the rectangle for evaluation phase and decision making phase; not sure if it works so we'll need to test it first
  rect(xleft=start.TR.eval, xright=stop.TR.eval, ybottom=-20, ytop=20, col='cornsilk', border=NA);
  rect(xleft=start.TR.dm, xright=stop.TR.dm, ybottom=-20, ytop=20, col='aliceblue', border=NA);
  for (rid in 1:length(run.ids)) {       # rid <- 1; 
    all.means <- read.delim(paste0(out.path,"COGED_np2_Sphere_p",parcels[pid],"_run",rid,".txt")) #let's see if this perfectly reads my txt!
    for (sid in 1:length(sub.ids)) {
      lines(x=0:(n.TRs-1), y=all.means[sid,], col='darkgrey', lwd=0.5)
    }
  }
  for (rid in 1:length(run.ids)) { 
    all.means <- read.delim(paste0(out.path,"COGED_np2_Sphere_p", parcels[pid],"_run",rid,".txt"))
    lines(x=0:(n.TRs-1), y=apply(all.means, 2, mean, trim=do.trim,na.rm=TRUE), col=colors[rid], lwd=2);
  }
  box();
  #plot each participant's trial wise activities into the current knitr (average per 108 trials across 3 runs)
  # for (tid in 1:length(time.ids)) { # tid<-1
  #   for (sid in 1:length(sub.ids)) { # sid <-1
  #     tmp.table <- read.delim(paste0(trial.out.path, "COGED_np2_trialwise_", time.ids[tid], "_sub", sub.ids[sid], ".txt"),header = FALSE)
  #     points(x=TR.value[tid],y=mean(tmp.table[,pid]),pch=16, cex = 0.5, col=rgb(0,0.5,0,alpha=0.3))
  #   }
  # }
}
@

<<code2trialwise, eval=FALSE, echo=FALSE, cache=TRUE>>=
#Calculate the trial-wise activity for evaluation phase and decision making phase
for (sid in 1:length(sub.ids)) { # sid<-9
  # Add empty evaluation & decision mean table for each participant
  eval.means <- array(NA, c(36*length(run.ids), 28))
  dm.means <- array(NA,c(36*length(run.ids), 28))
  # Reading in EVTs file
  evt.fname <- paste0(EVTS.path, "EVTS/", sub.ids[sid], "/", sub.ids[sid], "_COGED_EV_valuation.txt");
  if (!file.exists(evt.fname)) {
    message("EVTs file does not exisit for subject", sub.ids[sid])
    stop()
  } else {
    fin <- file(evt.fname, 'rt')
    tmp <- readLines(fin);
    close(fin); unlink(fin);
    if (length(tmp) != length(run.ids)) { stop("not expected evt file"); }
    evt.lst <- vector("list", length(run.ids));
    np.lst <- vector("list", length(run.ids));
    # Reading in np2 files
    for (rid in 1:length(run.ids)) { #rid <-1
      evt.lst[[rid]] <- as.numeric(strsplit(tmp[rid], " ")[[1]]);
      np.fname <- paste0(in.path, "sub-", sub.ids[sid], 
                         "_ses-1_task-COGED_run", run.ids[rid], "_np", which.polort, "_sphere.txt");
      if (!file.exists(np.fname)) {
        message("np2 file does not exist for subject", sub.ids[sid])
        stop()
      } else {
        np.tbl <- read.delim(np.fname);
        if (ncol(np.tbl) != 30) { stop("ncol(np.tbl) != 30"); }  # volume "timecourses" files have parcel numbers for the columns
        np.lst[[rid]] <- np.tbl;
      }
    }
    
    for (rid in 1:length(run.ids)) { #rid<-3
      # make censor.TRs. start by reading desc-confounds_timeseries.tsv$framewise_displacement
      # code from template_fMRIQC.rnw
      fname <- paste0(pp.path, sub.ids[sid], "/derivatives/fmriprep/sub-", sub.ids[sid], "/ses-1/func/sub-", sub.ids[sid],
                      "_ses-1_task-COGED_run-", run.ids[rid],  "_desc-confounds_timeseries.tsv");
      if (file.exists(fname)) {
        in.tbl <- read.delim(fname, na.strings="n/a");
        censor.TRs <- which(in.tbl$framewise_displacement > 0.9);  # > not >=
        np.tbl <- np.lst[[rid]]
        evt.vec <- evt.lst[[rid]];
        if (all(is.na(evt.vec))) {
          message("EVTs run:", run.ids[rid], " does not exist for subject", sub.ids[sid])
          next
        } else {
          tmp.tbl <- array(NA, c(length(evt.vec), n.TRs));
          for (pid in 1:length(parcels)) { #pid<-1
            for (i in 1:length(evt.vec)) { # i<-8
              tmp.tbl[i,] <- np.tbl[evt.vec[i]:((evt.vec[i])+n.TRs-1), paste0("Mean_", parcels[pid])]; 
              censor.TRs.run <- censor.TRs[censor.TRs >=(i-1)*25+1 & censor.TRs <=i*25]
              censor.TRs.run <- censor.TRs.run - (i-1)*25
              TRs.to.avg <- start.TR.eval:stop.TR.eval;  # all of 'em
              TRs.to.avg[which(TRs.to.avg %in% censor.TRs.run)] <- NA;  # censor.TRs made from which desc-confounds_timeseries.tsv framewise_displacement rows > 0.9
              if (length(which(is.na(TRs.to.avg))) <= 1) {   # may not need this if: with na.rm=TRUE I think the mean
                # will automatically be NA if all the TRs are NA. May not want to include the trial if too many frames are censored.
                eval.means[i+(rid-1)*36,pid] <- mean(tmp.tbl[i,TRs.to.avg], na.rm=TRUE)
              } else {
                eval.means[i+(rid-1)*36,pid] <- NA;
              }
              TRs.to.avg <- start.TR.dm:stop.TR.dm;  # all of 'em
              TRs.to.avg[which(TRs.to.avg %in% censor.TRs)] <- NA;  # censor.TRs made from which desc-confounds_timeseries.tsv
              if (length(which(is.na(TRs.to.avg))) <= 1) {   # may not need this if: with na.rm=TRUE I think the mean
                # will automatically be NA if all the TRs are NA. May not want to include the trial if too many frames are censored.
                dm.means[i+(rid-1)*36,pid] <- mean(tmp.tbl[i,TRs.to.avg], na.rm=TRUE)
              } else {
                eval.means[i+(rid-1)*36,pid] <- NA;
              }
              dm.means[i+(rid-1)*36,pid] <- mean(tmp.tbl[i,(start.TR.dm:stop.TR.dm)])
            }
          }
        }
      }
    }
    write.table(eval.means,file = paste0(trial.out.path, "COGED_np2_trialwise_sphere_eval_sub", sub.ids[sid], ".txt"), sep = "\t", row.names = FALSE, col.names = FALSE)
    write.table(dm.means,file = paste0(trial.out.path, "COGED_np2_trialwise_sphere_dm_sub", sub.ids[sid], ".txt"), sep = "\t", row.names = FALSE, col.names = FALSE)
  }
  }
@

<<code1OG, eval=FALSE, cache=FALSE, echo=FALSE, fig.height=2, fig.width=7, fig.align='center'>>=     
##### Original script that calculates everything on the go #####    
# everyone's means overplotted, a few parcels
for (pid in 1:400) { # pid <- 1;
  #for (pid in c(113, 116, 300,  623, 627, 850, 1, 501, 2)) {   
  for (rid in 1:length(run.ids)) {       # rid <- 1; 
    plot(x=1, y=1, type='n', xlim=c(0,(n.TRs-1)), ylim=c(-0.015, 0.02), xlab="TR since event onset", ylab="", xaxs='i', cex.axis=0.8, cex.lab=0.8);
    mtext(paste0("Volume. p", pid, " run", rid), side=3, cex=0.6, line=0.15);
    lines(x=c(-10,1000), y=c(0,0), col='black');    #  horizontal line at zero      
    all.means <- array(NA, c(length(sub.ids), n.TRs));
    for (sid in 1:length(sub.ids)) {     #   sid <- 1;
      evt.fname <- paste0(in.path, "EVTS/", sub.ids[sid], "/", sub.ids[sid], "_COGED_EV_valuation.txt");
      if (file.exists(evt.fname)) {
        # First, get the evt file into a list of three runs 
        fin <- file(evt.fname, 'rt')
        tmp <- readLines(fin);
        close(fin); unlink(fin);
        if (length(tmp) != length(run.ids)) { stop("not expected evt file"); }
        evt.lst <- vector("list", length(run.ids));
        # for (i in 1:length(run.ids)) { evt.lst[[i]] <- as.numeric(strsplit(tmp[i], " ")[[1]]); }
        evt.lst[[rid]] <- as.numeric(strsplit(tmp[rid], " ")[[1]]);
        
        # Then, we do the same thing for np   
        np.lst <- vector("list", length(run.ids));
        # for (rid in 1:length(run.ids)) {
        np.fname <- paste0(in.path, "AFNI_ANALYSIS/", sub.ids[sid], "/INPUT_DATA_NP2/sub-", sub.ids[sid],
                           "_ses-1_task-COGED_run", run.ids[rid], "_np", which.polort, ".txt");
        if (file.exists(np.fname)) {
          # read the parcel-average timeseries for this run
          np.tbl <- read.delim(np.fname);
          if (ncol(np.tbl) != 402) { stop("ncol(np.tbl) != 402"); }  # volume "timecourses" files have parcel numbers for the columns
          np.lst[[rid]] <- np.tbl;
        }
      }
      np.tbl <- np.lst[[rid]]
      evt.vec <- evt.lst[[rid]];
      tmp.tbl <- array(NA, c(length(evt.vec), n.TRs));
      for (i in 1:length(evt.vec)) { # i<-2
        tmp.tbl[i,] <- np.tbl[evt.vec[i]:((evt.vec[i])+n.TRs-1), paste0("Mean_", pid)]; } 
      all.means[sid,] <- apply(tmp.tbl, 2, mean, trim=do.trim, na.rm=TRUE)
      lines(x=0:(n.TRs-1), y=all.means[sid,], col='darkgrey', lwd=0.5);
    }
  lines(x=0:(n.TRs-1), y=apply(all.means, 2, mean, trim=do.trim), col='steelblue', lwd=2);
    }
box();
}
@

\end{document}