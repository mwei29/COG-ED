\documentclass[letterpaper]{article}
\usepackage{fullpage}
\addtolength{\hoffset}{-.5in}
\addtolength{\textwidth}{1in}
\addtolength{\voffset}{-.5in}
\addtolength{\textheight}{1in}
\begin{document}

<<startup, echo=FALSE, message=FALSE>>=
# source for this file is at https://osf.io/vqe92/; DMCC55B dataset at https://openneuro.org/datasets/ds003465/
# code written by Joset A. Etzel, jetzel@wustl.edu. It may be adapted for other research use, provided the source is cited.
# by Joset A. Etzel, Rachel E. Brough, Michael C. Freund, Alexander Kizhner, Yanli Lin, Matthew F. Singh, Rongxiang Tang, 
# Allison Tay, Anxu Wang, and Todd S. Braver. 
# Started 2 May by Mengzhe Wei, adapting Joset Etzel's code for MARCER data, making parcel-average COGED runs for individual participants

library(RNifti);

rm(list=ls());  
options(warnPartialMatchDollar=TRUE);   # safety option

# change this variable to the local copy of this directory, downloaded from https://openneuro.org/datasets/ds003465/
in.path <- "/data/MARCER/participantData/";  
atlas.path <- "/data/MARCER/ATLASES/";  
afni.path <- "/usr/local/pkg/afni_22/";   # path to the afni function executables
dir.desc <- "20230714test";  
sub.tbl <- read.table(paste0("/scratch2/weie/COGED_CODE/", dir.desc, "_subjectSet.txt"), stringsAsFactors=FALSE);
sub.ids <- sub.tbl$sub.id[which(sub.tbl$COGED_CatchNonCatch == TRUE)]
#This time around I am making two more participants' single subject np2 knitr
sub.ids <- sub.ids [1:10]

#sub.ids <- c("3008");

TR <- 1;  # in seconds, for x-axis timecourse scaling
task.id <- "COGED";    
run.ids <- 1:3
do.trim <- 0.1;

nlims <- c(-0.013, -0.003);   # color scaling for brain parcel plots
plims <- c(0.003, 0.013);

# set these the same as in controlAnalysis_prep.R
which.polort <- 2;    # see http://mvpa.blogspot.com/2018/06/detrending-and-normalizing-timecourses.html for more info
# variables for how to do the averaging. idea is to try to capture the HRF peak. button presses are short, so try a short window.
start.sec <- 3;     # when to start the averaging, in seconds after event onset
stop.sec <- 6;     # and when to stop
start.TR <- round(start.sec/TR);  # which TR to start averaging at: start.sec seconds after onset.
stop.TR <- round(stop.sec/TR);  # which TR to stop averaging at: stop.sec seconds after onset.
out.suffix <- paste0("avg", start.sec, "to", stop.sec, "secAfter");   # suffix for the output filenames to keep track of averaging
@

\noindent \texttt{MARCER\textunderscore COGEDaveraging.rnw} \par
\noindent compiled \today\  \par
\vspace{0.2 cm} 
\noindent This is a \texttt{knitr} file (\texttt{https://yihui.name/knitr/}); see the \texttt{.rnw} file with the same name as this \texttt{.pdf} for the R code to generate all figures and results. To compile, change the \texttt{in.path} variable in the first (\texttt{startup}) code chunk to the location of the BIDS directory structure downloaded from \texttt{https://openneuro.org/datasets/ds003465/}. \par
\vspace{1.2 cm} 


\noindent Single Subject knitr. \par
\vspace{0.2 cm} 
<<code0, eval=FALSE, cache=TRUE, echo=FALSE, fig.height=2, fig.width=7, fig.align='center'>>= 
layout(matrix(1:6, 1:6)); 
par(mar=c(2, 1, 1.5, 0.5), mgp=c(1.1, 0.2, 0), tcl=-0.3);
# mar: c(bottom, left, top, right) gives the number of lines of margin on the four sides of the plot. Default is c(5, 4, 4, 2) + 0.1.

sid <- 2;
n.TRs <- 25;
# load this person's COGED EVT file - all three runs in one file
evt.fname <- paste0(in.path, "EVTS/", sub.ids[sid], "/", sub.ids[sid], "_COGED_EV_valuation.txt");
if (file.exists(evt.fname)) {
  
  # get the event onsets for this run
  fin <- file(evt.fname, 'rt')
  tmp <- readLines(fin);
  close(fin); unlink(fin);
  if (length(tmp) != length(run.ids)) { stop("not expected evt file"); }
  
  evt.lst <- vector("list", length(run.ids));
  for (i in 1:length(run.ids)) { evt.lst[[i]] <- as.numeric(strsplit(tmp[i], " ")[[1]]); }
  
  # usually divide, but for MARCER, TR=1s ev.vec <- round(ev.tbl$onset/TR);   # integer onsets in TRs
  if (length(which(is.na(evt.lst))) > 0) { stop("is.na(ev.tbl$onset)"); }
}


# load in the timecourses for each run into a list
np.lst <- vector("list", length(run.ids));
for (rid in 1:length(run.ids)) { 
  np.fname <- paste0(in.path, "AFNI_ANALYSIS/", sub.ids[sid], "/INPUT_DATA_NP2/sub-", sub.ids[sid], 
                     "_ses-1_task-COGED_run", run.ids[rid], "_np", which.polort, ".txt");
  if (file.exists(np.fname)) {
    # read the parcel-average timeseries for this run
    np.tbl <- read.delim(np.fname);
    if (ncol(np.tbl) != 402) { stop("ncol(np.tbl) != 402"); }  # volume "timecourses" files have parcel numbers for the columns
    
    np.lst[[rid]] <- np.tbl;
  }
}

clrs <- c("salmon", "steelblue", "darkgreen");

# one line for this person, run, each event
for (pid in 1:400) {   # pid <- 1
  plot(x=1, y=1, type='n', xlim=c(0,(n.TRs-1)), ylim=c(-0.015, 0.02), xlab="TR since event onset", ylab="", xaxs='i', cex.axis=0.8, cex.lab=0.8);
  mtext(paste0("Volume. p", pid, " all 3 runs."), side=3, cex=0.6, line=0.15); 
  lines(x=c(-10,1000), y=c(0,0), col='black');    #  horizontal line at zero
  
  for (rid in 1:length(run.ids)) {   # rid <- 1;
    evt.vec <- evt.lst[[rid]];
    np.tbl <- np.lst[[rid]];
    
    tmp.tbl <- array(NA, c(length(evt.vec), n.TRs));  # plot each event, plus put 'em into tmp.tbl so can calulate mean
    for (i in 1:length(evt.vec)) {   # i <- 1;
      tmp.tbl[i,] <- np.tbl[evt.vec[i]:((evt.vec[i])+n.TRs-1), paste0("Mean_", pid)]; 
      # lines(x=0:(n.TRs-1), y=tmp.tbl[i,], col='darkgrey', lwd=0.5);
    } 
    
    lines(x=0:(n.TRs-1), y=apply(tmp.tbl, 2, mean, trim=do.trim, na.rm=TRUE), col=clrs[rid], lwd=2);
  }
  
  #lines(x=0:8, y=apply(all.means, 2, mean, trim=do.trim), col='steelblue', lwd=2);
  box();
}

@




\noindent All people with overplotted mean timecourses in a few parcels. 400x7 parcel-average volumes, \Sexpr{task.id}. \par
\vspace{0.2 cm} 
<<code1, eval=TRUE, cache=TRUE, echo=FALSE, fig.height=2, fig.width=7, fig.align='center'>>= 
layout(matrix(1:6, 1:6)); 
par(mar=c(2, 1, 1.5, 0.5), mgp=c(1.1, 0.2, 0), tcl=-0.3);
n.TRs <- 25;
# mar: c(bottom, left, top, right) gives the number of lines of margin on the four sides of the plot. Default is c(5, 4, 4, 2) + 0.1.

# everyone's means overplotted, a few parcels
for (pid in 1:400) { # pid <- 1;
  #for (pid in c(113, 116, 300,  623, 627, 850, 1, 501, 2)) {   
  for (rid in 1:length(run.ids)) {       # rid <- 1; 
    plot(x=1, y=1, type='n', xlim=c(0,(n.TRs-1)), ylim=c(-0.015, 0.02), xlab="TR since event onset", ylab="", xaxs='i', cex.axis=0.8, cex.lab=0.8);
    mtext(paste0("Volume. p", pid, " run", rid), side=3, cex=0.6, line=0.15);
    lines(x=c(-10,1000), y=c(0,0), col='black');    #  horizontal line at zero      
    all.means <- array(NA, c(length(sub.ids), n.TRs));
    for (sid in 1:length(sub.ids)) {     #   sid <- 1;
      evt.fname <- paste0(in.path, "EVTS/", sub.ids[sid], "/", sub.ids[sid], "_COGED_EV_valuation.txt");
      if (file.exists(evt.fname)) {
        # np.fname <- paste0(in.path, "AFNI_ANALYSIS/", sub.ids[sid], "/INPUT_DATA_NP2/sub-", sub.ids[sid], 
        #                "_ses-1_task-COGED_run", run.ids[rid], "_np", which.polort, ".txt");
        # ev.fname <- paste0(in.path, "sub-", sub.ids[sid], "/ses-wave1bas/func/sub-", sub.ids[sid], "_ses-wave1bas",
        #                    "_task-", task.id, "_acq-mb4", run.ids[rid], "_run-", rid, "_events.tsv");
        # np.fname <- paste0(out.path, "prep_vol/sub-", sub.ids[sid], "_ses-wave1bas_task-", task.id, "_run", rid, "_np", which.polort, "_vol.txt"); 
        # First, get the evt file into a list of three runs 
        fin <- file(evt.fname, 'rt')
        tmp <- readLines(fin);
        close(fin); unlink(fin);
        if (length(tmp) != length(run.ids)) { stop("not expected evt file"); }
        evt.lst <- vector("list", length(run.ids));
        # for (i in 1:length(run.ids)) { evt.lst[[i]] <- as.numeric(strsplit(tmp[i], " ")[[1]]); }
        evt.lst[[rid]] <- as.numeric(strsplit(tmp[rid], " ")[[1]]);
        
        # Then, we do the same thing for np   
        np.lst <- vector("list", length(run.ids));
        # for (rid in 1:length(run.ids)) {
        np.fname <- paste0(in.path, "AFNI_ANALYSIS/", sub.ids[sid], "/INPUT_DATA_NP2/sub-", sub.ids[sid],
                           "_ses-1_task-COGED_run", run.ids[rid], "_np", which.polort, ".txt");
        if (file.exists(np.fname)) {
          # read the parcel-average timeseries for this run
          np.tbl <- read.delim(np.fname);
          if (ncol(np.tbl) != 402) { stop("ncol(np.tbl) != 402"); }  # volume "timecourses" files have parcel numbers for the columns
          np.lst[[rid]] <- np.tbl;
        }
      }
      np.tbl <- np.lst[[rid]]
      evt.vec <- evt.lst[[rid]];
      tmp.tbl <- array(NA, c(length(evt.vec), n.TRs));
      for (i in 1:length(evt.vec)) { # i<-2
        tmp.tbl[i,] <- np.tbl[evt.vec[i]:((evt.vec[i])+n.TRs-1), paste0("Mean_", pid)]; } 
      all.means[sid,] <- apply(tmp.tbl, 2, mean, trim=do.trim, na.rm=TRUE)
      lines(x=0:(n.TRs-1), y=all.means[sid,], col='darkgrey', lwd=0.5);
    }
  lines(x=0:(n.TRs-1), y=apply(all.means, 2, mean, trim=do.trim), col='steelblue', lwd=2);
    }
box();
}
    

@


\newpage 
\noindent Group parcel averages, averaging the TRs \Sexpr{start.TR} to \Sexpr{stop.TR} after each event. \par
\vspace{0.2 cm} 
<<code2, eval=FALSE, cache=FALSE, dev='pdf', echo=FALSE, fig.height=1, fig.width=8, fig.align='center'>>=

# store parcel-average trial-average means for speed of repeated plotting
fname <- paste0(out.path, task.id, "VolumeParcelMeans_trim", out.suffix, ".txt");
if (!file.exists(fname)) {
  mean.tbl <- array(NA, c(length(p.key), length(sub.ids)*length(run.ids)));
  colnames(mean.tbl) <- c(paste0(sub.ids, ".run1"), paste0(sub.ids, ".run2"));
  
  for (sid in 1:length(sub.ids)) {
    for (rid in 1:length(run.ids)) {   # rid <- 1; sid <- 1;
      ev.fname <- paste0(in.path, "sub-", sub.ids[sid], "/ses-wave1bas/func/sub-", sub.ids[sid], "_ses-wave1bas", 
                         "_task-", task.id, "_acq-mb4", run.ids[rid], "_run-", rid, "_events.tsv");
      np.fname <- paste0(out.path, "prep_vol/sub-", sub.ids[sid], "_ses-wave1bas_task-", task.id, "_run", rid, "_np", which.polort, "_vol.txt"); 
      if (file.exists(ev.fname) & file.exists(np.fname)) {
        ev.tbl <- read.delim(ev.fname, na.strings="n/a", stringsAsFactors=FALSE);
        if (length(which(is.na(ev.tbl$onset))) > 0) { stop("is.na(ev.tbl$onset)"); }
        ev.vec <- round(ev.tbl$onset/TR);   # integer onsets in TRs
        
        np.tbl <- read.delim(np.fname); 
        if (ncol(np.tbl) != 1002) { stop("ncol(np.tbl) != 1002"); }  # volume "timecourses" files have parcel numbers for the columns
        
        for (pid in 1:length(p.key)) {    # pid <- 80;
          means <- rep(NA, length(ev.vec));      # average of TRs for this event
          for (i in 1:length(ev.vec)) { means[i] <- mean(np.tbl[(ev.vec[i]+start.TR):((ev.vec[i])+stop.TR), paste0("Mean_", pid)]); } 
          mean.tbl[pid,paste0(sub.ids[sid], ".run", rid)] <- mean(means, trim=do.trim);
        }
      }
    }
  }
  write.table(mean.tbl, fname);
}
vol.tbl <- read.table(fname);
means <- apply(vol.tbl, 1, mean, trim=do.trim)

tmp.img <- array(0, dim(under.img));
for (pid in 1:length(means)) { tmp.img[which(p.img == pid)] <- means[pid]; }

plims <- c(0.0006, 0.004);
nlims <- c(-0.004, -0.0006);
plot.volume(tmp.img, under.img, ttl=paste(task.id, "means"), neg.lims=nlims, pos.lims=plims);  
plot.volume(tmp.img, under.img, ttl=paste(task.id, "abs(means)"), pos.lims=plims); 

@

<<code2leg, EVAL=FALSE, cache=FALSE, echo=FALSE, dev='pdf', fig.height=0.35, fig.width=5, fig.align='center'>>=
par(oma=rep(0,4), mar=rep(0,4), tcl=-0.3);   

# colorscale
# cols.cool, cols.warm defined in niftiPlottingFunctions.R
plot(x=0, y=0, xlim=c(-10,131), type='n', ylab="", xlab="", main="", bty='n', xaxt='n', yaxt='n');  # blank plot
for (i in 1:length(cols.warm)) { rect(xleft=63+i, xright=64+i, ybottom=-0.5, ytop=0.5, col=cols.warm[i], border=cols.warm[i]); }
for (i in 1:length(cols.cool)) { rect(xleft=56-i, xright=57-i, ybottom=-0.5, ytop=0.5, col=cols.cool[i], border=cols.cool[i]); }
text(x=60, y=0, labels=0);
text(x=-5, y=0, labels=nlims[1], adj=1, cex=0.8);
text(x=130, y=0, labels=plims[2], cex=0.8);

@



\end{document}